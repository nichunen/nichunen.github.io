<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>倪春恩的博客</title>
  
  <subtitle>倪春恩的博客</subtitle>
  <link href="http://nichunen.github.io/atom.xml" rel="self"/>
  
  <link href="http://nichunen.github.io/"/>
  <updated>2023-09-12T03:55:31.439Z</updated>
  <id>http://nichunen.github.io/</id>
  
  <author>
    <name>Ni Chunen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gold-5-6</title>
    <link href="http://nichunen.github.io/2023/09/12/gold-5-6/"/>
    <id>http://nichunen.github.io/2023/09/12/gold-5-6/</id>
    <published>2023-09-12T03:06:27.000Z</published>
    <updated>2023-09-12T03:55:31.439Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;整数转换。编写一个函数，确定需要改变几个位才能将整数A转成整数B。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>gold-5-4</title>
    <link href="http://nichunen.github.io/2023/09/11/gold-5-4/"/>
    <id>http://nichunen.github.io/2023/09/11/gold-5-4/</id>
    <published>2023-09-11T05:45:36.000Z</published>
    <updated>2023-09-11T05:50:17.127Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;下一个数。给定一个正整数，找出与其二进制表达式中1的个数相同且大小最接近的那两个数（一个略大，一个略小）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>gold-5-3</title>
    <link href="http://nichunen.github.io/2023/09/10/gold-5-3/"/>
    <id>http://nichunen.github.io/2023/09/10/gold-5-3/</id>
    <published>2023-09-10T03:03:02.000Z</published>
    <updated>2023-09-10T07:34:18.991Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;给定一个32位整数 &lt;code&gt;num&lt;/code&gt;，你可以将一个数位从0变为1。请编写一个程序，找出你能够获得的最长的一串1的长度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;line-numbers</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>gold-5-2</title>
    <link href="http://nichunen.github.io/2023/09/08/gold-5-2/"/>
    <id>http://nichunen.github.io/2023/09/08/gold-5-2/</id>
    <published>2023-09-08T03:30:15.000Z</published>
    <updated>2023-09-08T04:41:52.256Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;二进制数转字符串。给定一个介于0和1之间的实数（如0.72），类型为double，打印它的二进制表达式。如果该数字无法精确地用32位以内的二进制表示，则打印“ERROR”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>gold-5-1</title>
    <link href="http://nichunen.github.io/2023/09/05/gold-5-1/"/>
    <id>http://nichunen.github.io/2023/09/05/gold-5-1/</id>
    <published>2023-09-05T13:18:32.000Z</published>
    <updated>2023-09-05T14:31:50.367Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;给定两个整型数字 &lt;code&gt;N&lt;/code&gt; 与 &lt;code&gt;M&lt;/code&gt;，以及表示比特位置的 &lt;code&gt;i&lt;/code&gt; 与 &lt;code&gt;j&lt;/code&gt;（&lt;code&gt;i &amp;lt;= j&lt;/code&gt;，且从 0 位开始计算）。&lt;/p&gt;
&lt;p&gt;编写一种方法，使</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>gold-4-12</title>
    <link href="http://nichunen.github.io/2023/09/04/gold-4-12/"/>
    <id>http://nichunen.github.io/2023/09/04/gold-4-12/</id>
    <published>2023-09-04T07:43:30.000Z</published>
    <updated>2023-09-04T09:18:57.066Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;给定一棵二叉树，其中每个节点都含有一个整数数值(该值或正或负)。设计一个算法，打印节点数值总和等于某个给定值的所有路径的数量。注意，路径不一定非得从二叉树的根节点或叶节点开始或结束，但是其方向必须向下(只能从父节点指向子节点方向)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例:&lt;/</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>gold-4-10</title>
    <link href="http://nichunen.github.io/2023/09/03/gold-4-10/"/>
    <id>http://nichunen.github.io/2023/09/03/gold-4-10/</id>
    <published>2023-09-03T02:52:18.000Z</published>
    <updated>2023-09-03T03:48:37.445Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;检查子树。你有两棵非常大的二叉树：T1，有几万个节点；T2，有几万个节点。设计一个算法，判断 T2 是否为 T1 的子树。&lt;/p&gt;
&lt;p&gt;如果 T1 有这么一个节点 n，其子树与 T2 一模一样，则 T2 为 T1 的子树，也就是说，从节点 n 处把树砍断，得到的树与</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>gold-4-9</title>
    <link href="http://nichunen.github.io/2023/09/01/gold-4-9/"/>
    <id>http://nichunen.github.io/2023/09/01/gold-4-9/</id>
    <published>2023-09-01T05:45:03.000Z</published>
    <updated>2023-09-01T06:00:09.563Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;从左向右遍历一个数组，通过不断将其中的元素插入树中可以逐步地生成一棵二叉搜索树。&lt;/p&gt;
&lt;p&gt;给定一个由&lt;strong&gt;不同节点&lt;/strong&gt;组成的二叉搜索树 &lt;code&gt;root&lt;/code&gt;，输出所有可能生成此树的数组。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>gold-4-8</title>
    <link href="http://nichunen.github.io/2023/08/31/gold-4-8/"/>
    <id>http://nichunen.github.io/2023/08/31/gold-4-8/</id>
    <published>2023-08-31T03:03:51.000Z</published>
    <updated>2023-08-31T03:55:47.097Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;设计并实现一个算法，找出二叉树中某两个节点的第一个共同祖先。不得将其他的节点存储在另外的数据结构中。注意：这不一定是二叉搜索树。&lt;/p&gt;
&lt;p&gt;例如，给定如下二叉树: root = [3,5,1,6,2,0,8,null,null,7,4]&lt;/p&gt;
&lt;pre</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>gold-4-6</title>
    <link href="http://nichunen.github.io/2023/08/30/gold-4-6/"/>
    <id>http://nichunen.github.io/2023/08/30/gold-4-6/</id>
    <published>2023-08-30T03:54:27.000Z</published>
    <updated>2023-08-30T07:20:55.861Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;设计一个算法，找出二叉搜索树中指定节点的“下一个”节点（也即中序后继）。&lt;/p&gt;
&lt;p&gt;如果指定节点没有对应的“下一个”节点，则返回&lt;code&gt;null&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>gold-4-5</title>
    <link href="http://nichunen.github.io/2023/08/29/gold-4-5/"/>
    <id>http://nichunen.github.io/2023/08/29/gold-4-5/</id>
    <published>2023-08-29T03:26:27.000Z</published>
    <updated>2023-08-29T07:31:45.155Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;实现一个函数，检查一棵二叉树是否为二叉搜索树。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;输入:
    2
</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>gold-4-4</title>
    <link href="http://nichunen.github.io/2023/08/28/gold-4-4/"/>
    <id>http://nichunen.github.io/2023/08/28/gold-4-4/</id>
    <published>2023-08-28T03:12:42.000Z</published>
    <updated>2023-08-28T03:55:26.631Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;实现一个函数，检查二叉树是否平衡。在这个问题中，平衡树的定义如下：任意一个节点，其两棵子树的高度差不超过 1。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>gold-4-3</title>
    <link href="http://nichunen.github.io/2023/08/27/gold-4-3/"/>
    <id>http://nichunen.github.io/2023/08/27/gold-4-3/</id>
    <published>2023-08-27T03:10:06.000Z</published>
    <updated>2023-08-27T05:46:55.404Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;给定一棵二叉树，设计一个算法，创建含有某一深度上所有节点的链表（比如，若一棵树的深度为 &lt;code&gt;D&lt;/code&gt;，则会创建出 &lt;code&gt;D&lt;/code&gt;</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>gold-4-2</title>
    <link href="http://nichunen.github.io/2023/08/25/gold-4-2/"/>
    <id>http://nichunen.github.io/2023/08/25/gold-4-2/</id>
    <published>2023-08-25T03:36:22.000Z</published>
    <updated>2023-08-25T06:08:42.885Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;给定一个有序整数数组，元素各不相同且按升序排列，编写一个算法，创建一棵高度最小的二叉搜索树。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>gold-4-1</title>
    <link href="http://nichunen.github.io/2023/08/24/gold-4-1/"/>
    <id>http://nichunen.github.io/2023/08/24/gold-4-1/</id>
    <published>2023-08-24T06:50:27.000Z</published>
    <updated>2023-08-24T08:26:19.430Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;节点间通路。给定有向图，设计一个算法，找出两个节点之间是否存在一条路径。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>gold-2-6</title>
    <link href="http://nichunen.github.io/2023/08/23/gold-3-6/"/>
    <id>http://nichunen.github.io/2023/08/23/gold-3-6/</id>
    <published>2023-08-23T05:21:24.000Z</published>
    <updated>2023-08-23T05:24:16.954Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;动物收容所。有家动物收容所只收容狗与猫，且严格遵守“先进先出”的原则。在收养该收容所的动物时，收养人只能收养所有动物中“最老”（由其进入收容所的时间长短而定）的动物，或者可以挑选猫或狗（同时必须收养此类动物中“最老”的）。换言之，收养人不能自由挑选想收养的对象。请创建适用于</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>gold-3-5</title>
    <link href="http://nichunen.github.io/2023/08/22/gold-3-5/"/>
    <id>http://nichunen.github.io/2023/08/22/gold-3-5/</id>
    <published>2023-08-22T07:37:18.000Z</published>
    <updated>2023-08-22T08:47:20.148Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;栈排序。 编写程序，对栈进行排序使最小元素位于栈顶。最多只能使用一个其他的临时栈存放数据，但不得将元素复制到别的数据结构（如数组）中。该栈支持如下操作：&lt;code&gt;push&lt;/code&gt;、&lt;code&gt;pop&lt;/code&gt;、&lt;code&gt;peek&lt;/code&gt; 和</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>gold-3-4</title>
    <link href="http://nichunen.github.io/2023/08/21/gold-3-4/"/>
    <id>http://nichunen.github.io/2023/08/21/gold-3-4/</id>
    <published>2023-08-21T07:27:50.000Z</published>
    <updated>2023-08-21T07:54:46.550Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;实现一个MyQueue类，该类用两个栈来实现一个队列。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;MyQueue</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>gold-3-3</title>
    <link href="http://nichunen.github.io/2023/08/20/gold-3-3/"/>
    <id>http://nichunen.github.io/2023/08/20/gold-3-3/</id>
    <published>2023-08-20T03:05:43.000Z</published>
    <updated>2023-08-20T11:10:15.703Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;堆盘子。设想有一堆盘子，堆太高可能会倒下来。因此，在现实生活中，盘子堆到一定高度时，我们就会另外堆一堆盘子。请实现数据结构&lt;code&gt;SetOfStacks&lt;/code&gt;，模拟这种行为。&lt;code&gt;SetOfStacks&lt;/code&gt;应该由多个栈组成，并且在前一个栈填满时新</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>gold-3-2</title>
    <link href="http://nichunen.github.io/2023/08/18/gold-3-2/"/>
    <id>http://nichunen.github.io/2023/08/18/gold-3-2/</id>
    <published>2023-08-18T02:55:40.000Z</published>
    <updated>2023-08-18T09:14:16.997Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;请设计一个栈，除了常规栈支持的pop与push函数以外，还支持min函数，该函数返回栈元素中的最小值。执行push、pop和min操作的时间复杂度必须为O(1)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;pre</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
</feed>
