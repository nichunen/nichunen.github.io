<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>倪春恩的博客</title>
  
  <subtitle>倪春恩的博客</subtitle>
  <link href="http://nichunen.github.io/atom.xml" rel="self"/>
  
  <link href="http://nichunen.github.io/"/>
  <updated>2023-04-13T11:27:52.406Z</updated>
  <id>http://nichunen.github.io/</id>
  
  <author>
    <name>Ni Chunen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【转载】设计模式：原型模式</title>
    <link href="http://nichunen.github.io/2023/04/12/design-pattern-prototype/"/>
    <id>http://nichunen.github.io/2023/04/12/design-pattern-prototype/</id>
    <published>2023-04-12T07:23:22.000Z</published>
    <updated>2023-04-13T11:27:52.406Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;原型模式（Prototype</summary>
        
      
    
    
    
    <category term="设计模式" scheme="http://nichunen.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://nichunen.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>offer2-28</title>
    <link href="http://nichunen.github.io/2023/04/12/offer2-28/"/>
    <id>http://nichunen.github.io/2023/04/12/offer2-28/</id>
    <published>2023-04-12T02:59:09.000Z</published>
    <updated>2023-04-12T06:13:18.963Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;多级双向链表中，除了指向下一个节点和前一个节点指针之外，它还有一个子链表指针，可能指向单独的双向链表。这些子列表也可能会有一个或多个自己的子项，依此类推，生成多级数据结构，如下面的示例所示。&lt;/p&gt;
&lt;p&gt;给定位于列表第一级的头节点，请扁平化列表，即将这样的多级双向链表展平</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【转载】设计模式：建造者模式(Builder Pattern)-以造汽车买汽车为例</title>
    <link href="http://nichunen.github.io/2023/04/11/design-pattern-builder/"/>
    <id>http://nichunen.github.io/2023/04/11/design-pattern-builder/</id>
    <published>2023-04-11T05:58:15.000Z</published>
    <updated>2023-04-11T06:45:09.582Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。&lt;/p&gt;
&lt;p&gt;类型：创建类模式&lt;/p&gt;
&lt;p&gt;类图：&lt;/p&gt;
&lt;p&gt;&lt;img</summary>
        
      
    
    
    
    <category term="设计模式" scheme="http://nichunen.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://nichunen.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>offer2-27</title>
    <link href="http://nichunen.github.io/2023/04/11/offer2-27/"/>
    <id>http://nichunen.github.io/2023/04/11/offer2-27/</id>
    <published>2023-04-11T02:48:49.000Z</published>
    <updated>2023-04-11T05:34:39.553Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;给定一个链表的 &lt;strong&gt;头节点&lt;/strong&gt; &lt;code&gt;head&lt;/code&gt;</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【转载】设计模式：状态模式-以自动售货机为例</title>
    <link href="http://nichunen.github.io/2023/04/10/design-pattern-state/"/>
    <id>http://nichunen.github.io/2023/04/10/design-pattern-state/</id>
    <published>2023-04-10T07:10:25.000Z</published>
    <updated>2023-04-10T09:45:29.663Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;先看定义：允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它的类。定义又开始模糊了，理一下，当对象的内部状态改变时，它的行为跟随状态的改变而改变了，看起来好像重新初始化了一个类似的。&lt;/p&gt;
&lt;p&gt;下面使用个例子来说明状态模式的用法，现在有个自动售货机的代码需要我</summary>
        
      
    
    
    
    <category term="设计模式" scheme="http://nichunen.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://nichunen.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>offer2-26</title>
    <link href="http://nichunen.github.io/2023/04/10/offer2-26/"/>
    <id>http://nichunen.github.io/2023/04/10/offer2-26/</id>
    <published>2023-04-10T03:25:10.000Z</published>
    <updated>2023-04-10T06:10:18.027Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;给定一个单链表 &lt;code&gt;L&lt;/code&gt; 的头节点 &lt;code&gt;head&lt;/code&gt; ，单链表 &lt;code&gt;L&lt;/code&gt; 表示为：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;L0 → L1 → … → Ln-1 →</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>offer2-25</title>
    <link href="http://nichunen.github.io/2023/04/07/offer2-25/"/>
    <id>http://nichunen.github.io/2023/04/07/offer2-25/</id>
    <published>2023-04-07T06:26:12.000Z</published>
    <updated>2023-04-07T09:34:33.016Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;给定两个 &lt;strong&gt;非空链表&lt;/strong&gt; &lt;code&gt;l1&lt;/code&gt;和 &lt;code&gt;l2&lt;/code&gt; 来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表。&lt;/p&gt;
&lt;p&gt;可以假设除了数字 0</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【转载】设计模式：模版方法模式-展现程序员的一天</title>
    <link href="http://nichunen.github.io/2023/04/06/design-pattern-template/"/>
    <id>http://nichunen.github.io/2023/04/06/design-pattern-template/</id>
    <published>2023-04-06T11:52:14.000Z</published>
    <updated>2023-04-07T05:58:00.915Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;老套路，先看下定义：定义了一个算法的骨架，而将一些步骤延迟到子类中，模版方法使得子类可以在不改变算法结构的情况下，重新定义算法的步骤。&lt;/p&gt;
&lt;p&gt;简单看下定义，模版方法定义了一个算法的步骤，并且允许子类为一个或多个步骤提供实现。定义还算清晰，下面来个例子展示下本公司的上</summary>
        
      
    
    
    
    <category term="设计模式" scheme="http://nichunen.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://nichunen.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>offer2-24</title>
    <link href="http://nichunen.github.io/2023/04/06/offer2-24/"/>
    <id>http://nichunen.github.io/2023/04/06/offer2-24/</id>
    <published>2023-04-06T05:21:08.000Z</published>
    <updated>2023-04-06T11:17:21.971Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;给定单链表的头节点 &lt;code&gt;head&lt;/code&gt; ，请反转链表，并返回反转后的链表的头节点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【转载】</title>
    <link href="http://nichunen.github.io/2023/04/04/design-pattern-facade/"/>
    <id>http://nichunen.github.io/2023/04/04/design-pattern-facade/</id>
    <published>2023-04-04T13:04:49.000Z</published>
    <updated>2023-04-04T14:12:44.886Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;这个模式比较简单，嘿嘿，简单写一下。&lt;/p&gt;
&lt;p&gt;老样子，先看 外观模式（Facade</summary>
        
      
    
    
    
    <category term="设计模式" scheme="http://nichunen.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://nichunen.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>offer2-23</title>
    <link href="http://nichunen.github.io/2023/04/04/offer2-23/"/>
    <id>http://nichunen.github.io/2023/04/04/offer2-23/</id>
    <published>2023-04-04T03:08:54.000Z</published>
    <updated>2023-04-04T03:38:14.201Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;给定两个单链表的头节点 &lt;code&gt;headA&lt;/code&gt; 和 &lt;code&gt;headB&lt;/code&gt; ，请找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 &lt;code&gt;null&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;图示两个链表在节点</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【转载】设计模式：装饰者模式-带你重回传奇世界</title>
    <link href="http://nichunen.github.io/2023/04/03/design-pattern-decorator/"/>
    <id>http://nichunen.github.io/2023/04/03/design-pattern-decorator/</id>
    <published>2023-04-03T11:16:27.000Z</published>
    <updated>2023-04-03T13:57:45.659Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;装饰者模式：若要扩展功能，装饰者提供了比集成更有弹性的替代方案，动态地将责任附加到对象上。&lt;/p&gt;
&lt;p&gt;先简单描述下装饰者模式发挥作用的地方，当我们设计好了一个类，我们需要给这个类添加一些辅助的功能，并且不希望改变这个类的代码，这时候就是装饰者模式大展雄威的时候了。这里还</summary>
        
      
    
    
    
    <category term="设计模式" scheme="http://nichunen.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://nichunen.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>offer2-22</title>
    <link href="http://nichunen.github.io/2023/04/03/offer2-22/"/>
    <id>http://nichunen.github.io/2023/04/03/offer2-22/</id>
    <published>2023-04-03T03:44:54.000Z</published>
    <updated>2023-04-03T09:21:35.233Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;给定一个链表，返回链表开始入环的第一个节点。 从链表的头节点开始沿着 &lt;code&gt;next&lt;/code&gt; 指针进入环的第一个节点为环的入口节点。如果链表无环，则返回 &lt;code&gt;null&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;为了表示给定链表中的环，我们使用整数</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【转载】设计模式：命令模式-管理智能家电</title>
    <link href="http://nichunen.github.io/2023/03/31/design-pattern-command/"/>
    <id>http://nichunen.github.io/2023/03/31/design-pattern-command/</id>
    <published>2023-03-31T07:56:39.000Z</published>
    <updated>2023-03-31T11:33:31.885Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;定义：将“请求”封装成对象，以便使用不同的请求、队列或者日志来参数化其他对象。命令模式也支持可撤销的操作。&lt;/p&gt;
&lt;p&gt;这尼玛定义，看得人蛋疼，看不明白要淡定，我稍微简化一下：将请求封装成对象，将动作请求者和动作执行者解耦。好了，直接用例子来说明。&lt;/p&gt;
&lt;p&gt;需求：最</summary>
        
      
    
    
    
    <category term="设计模式" scheme="http://nichunen.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://nichunen.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>offer2-21</title>
    <link href="http://nichunen.github.io/2023/03/31/offer2-21/"/>
    <id>http://nichunen.github.io/2023/03/31/offer2-21/</id>
    <published>2023-03-31T05:40:56.000Z</published>
    <updated>2023-03-31T07:57:08.976Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;给定一个链表，删除链表的倒数第 &lt;code&gt;n&lt;/code&gt; 个结点，并且返回链表的头结点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【转载】设计模式：适配器模式-以手机充电器为例</title>
    <link href="http://nichunen.github.io/2023/03/30/design-pattern-adapter/"/>
    <id>http://nichunen.github.io/2023/03/30/design-pattern-adapter/</id>
    <published>2023-03-30T12:31:52.000Z</published>
    <updated>2023-03-30T15:11:02.459Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;老样子，定义：将一个类的接口转换成客户期望的另一个接口，适配器让原本接口不兼容的类可以相互合作。这个定义还好，说适配器的功能就是把一个接口转成另一个接口。&lt;/p&gt;
&lt;p&gt;发现两张图片可以很好的解释&lt;strong&gt;适配器模式&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img</summary>
        
      
    
    
    
    <category term="设计模式" scheme="http://nichunen.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://nichunen.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>offer2-20</title>
    <link href="http://nichunen.github.io/2023/03/30/offer2-20/"/>
    <id>http://nichunen.github.io/2023/03/30/offer2-20/</id>
    <published>2023-03-30T03:15:16.000Z</published>
    <updated>2023-03-30T05:28:27.293Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;给定一个字符串 &lt;code&gt;s&lt;/code&gt; ，请计算这个字符串中有多少个回文子字符串。&lt;/p&gt;
&lt;p&gt;具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;
&lt;pre</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>【转载】设计模式：策略模式-以角色游戏为背景</title>
    <link href="http://nichunen.github.io/2023/03/29/design-pattern-strategy/"/>
    <id>http://nichunen.github.io/2023/03/29/design-pattern-strategy/</id>
    <published>2023-03-29T06:44:41.000Z</published>
    <updated>2023-03-29T07:34:07.826Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;先来看看策略模式的定义：&lt;/p&gt;
&lt;p&gt;策略模式（Strategy</summary>
        
      
    
    
    
    <category term="设计模式" scheme="http://nichunen.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="http://nichunen.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>offer2-19</title>
    <link href="http://nichunen.github.io/2023/03/29/offer2-19/"/>
    <id>http://nichunen.github.io/2023/03/29/offer2-19/</id>
    <published>2023-03-29T03:38:02.000Z</published>
    <updated>2023-03-29T05:57:53.264Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;给定一个非空字符串 &lt;code&gt;s&lt;/code&gt;，请判断如果 &lt;strong&gt;最多&lt;/strong&gt; 从字符串中删除一个字符能否得到一个回文字符串。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;line-numbers</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>offer2-18</title>
    <link href="http://nichunen.github.io/2023/03/28/offer2-18/"/>
    <id>http://nichunen.github.io/2023/03/28/offer2-18/</id>
    <published>2023-03-28T15:02:24.000Z</published>
    <updated>2023-03-28T16:08:19.744Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;给定一个字符串 &lt;code&gt;s&lt;/code&gt; ，验证 &lt;code&gt;s&lt;/code&gt; 是否是 &lt;strong&gt;回文串&lt;/strong&gt; ，只考虑字母和数字字符，可以忽略字母的大小写。&lt;/p&gt;
&lt;p&gt;本题中，将空字符串定义为有效的 &lt;strong&gt;回文串&lt;/strong&gt;</summary>
        
      
    
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/categories/leetcode/"/>
    
    
    <category term="leetcode" scheme="http://nichunen.github.io/tags/leetcode/"/>
    
  </entry>
  
</feed>
